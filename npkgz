#!/usr/bin/env bash

#________________________________________________________________________
#                _             
#    _ __  _ __ | | ____ _ ____
#   | '_ \| '_ \| |/ / _` |_  /
#   | | | | |_) |   < (_| |/ / 
#   |_| |_| .__/|_|\_\__, /___|
#         |_|        |___/     
#   
# npkgz » simply pack nodejs applications into tgz archive
#________________________________________________________________________
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# --
# Copyright 2020-2021 Andi Dittrich <https://andidittrich.com>
#________________________________________________________________________

_VERSION="1.0.0"
_LICENSE="MPL-2.0"
_REPOSITORY="https://github.com/AndiDittrich/npkgz"

show_usage(){
    cat << EOF
Usage: npkgz <command> [args...]

Options:
    -h,--help               Displays this help
    -v,--version            Displays version

Commands:
    build <target> [tag]        Build a docker image within the given directory (cached)
    rebuild <target> [tag]      Build a docker image within the given directory (uncached)
    push <target>               Push an existing image to the registry defined by target
    update <target> [tag]       Rebuild the image and push to registry (uncached)

EOF
    exit 0
}

show_version(){
    cat << EOF
npkgz » simply pack nodejs applications into tgz archive » v${_VERSION}
License: Mozilla Public License, v. 2.0 (MPL-2.0) https://opensource.org/licenses/MPL-2.0
Repository: ${_REPOSITORY}
EOF
    exit 0
}

# simple processing for help+versioning commands
[ "$1" = "--help" ] || [ "$1" = "-h" ] || [ -z "$1" ] && show_usage
[ "$1" = "--version" ] || [ "$1" = "-v" ] && show_version

# Exit on Error
set -e

# basedir
BASEDIR="$( cd "$( dirname "$(realpath ${BASH_SOURCE[0]})" )" && pwd )"
WORKINGDIR="$(pwd)"

# extract target name; remove trailing slash
TARGET_NAME="${2%/}"

# load functions
source $BASEDIR/lib/functions

# intro
# ---------------------------------------
function npkgz_intro(){
    print_heading " >> npkgz"
    _print_colorized '\x1B[1m' "npkgz » simply pack nodejs applications into tgz archive\n"
}

# validate paths
npkgz_prepare(){
    
    # image name provided ?
    if [ -z "$1" ]; then
        panic "image path not provided"
    fi

    # extract path
    PKG_PATH="$(realpath $1)"

    # path exists ?
    if [ ! -d "$PKG_PATH" ]; then
        panic "image path not provided"
    fi

    # extract image name (strip trailing slash)
    PKG_NAME="$(basename $PKG_PATH)"

    # options file exists ?
    if [ ! -f "$PKG_PATH/.npkgz" ]; then
        panic "options file doesn't exist"
    fi

    # entrypoint exists ?
    if [ ! -f "$PKG_PATH/main.js" ]; then
        panic "entrypoint doesn't exist"
    fi

    # dist dir exists ?
    if [ ! -d "$PKG_PATH/dist" ]; then
        panic "dist dir doesn't exist"
    fi

    # show info
    log_info "package-name: ${PKG_NAME}"
    log_info "package-path: ${PKG_PATH}"
}

# trigger cached build
npkgz_build(){
    log_info "bulding package"

    # load config
    source $PKG_PATH/.npkgz

    # create tmp build dir
    BUILD_DIR=$(mktemp -d)

    # source dirs to array
    IFS=' ' read -ra sourceDirs <<<"$NPKGZ_INCLUDE"

    # copy files
    for dir in "${sourceDirs[@]}"; do
        log_info "copying [$dir].."
        cp -R ${PKG_PATH}/$dir ${BUILD_DIR}
    done

    # copy package files
    cp ${PKG_PATH}/package.json ${BUILD_DIR}
    cp ${PKG_PATH}/yarn.lock ${BUILD_DIR}
    cp ${PKG_PATH}/main.js ${BUILD_DIR}

    # install dependencies
    cd ${BUILD_DIR}
    yarn install --production

    # create package
    tar cfz ${PKG_PATH}/dist/${PKG_NAME}.tgz -C ${BUILD_DIR} .

    # cleanup
    rm -rf ${BUILD_DIR}
}


# Command Dispatching
# ---------------------------------------
case "$1" in
    check)
        npkgz_intro
        npkgz_prepare $2
        exit 0
    ;;

    build)
        npkgz_intro
        npkgz_prepare $2
        npkgz_build
        exit 0
    ;;

    update)
        npkgz_intro
        npkgz_prepare $2
        #npkgz_push
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac